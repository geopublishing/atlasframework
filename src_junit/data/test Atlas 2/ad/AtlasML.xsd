<?xml version="1.0" encoding="UTF-8"?>
<!------------------------------------------------------------------------------
  Copyright (c) 2009 Stefan A. Krüger.
  
  This file is part of the Geopublisher application - An authoring tool to facilitate the publication and distribution of geoproducts in form of online and/or offline end-user GIS.
  http://www.geopublishing.org
  
  Geopublisher is part of the Geopublishing Framework hosted at:
  http://wald.intevation.org/projects/atlas-framework/
  
  This program is free software; you can redistribute it and/or
  modify it under the terms of the GNU General Public License
  as published by the Free Software Foundation; either version 3 of the License, or (at your option) any later version.
  
  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.
  
  You should have received a copy of the GNU General Public License (license.txt)
  along with this program; if not, write to the Free Software
  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
  or try this link: http://www.gnu.org/licenses/gpl.html
  
  Contributors:
      Stefan A. Krüger - initial API and implementation
------------------------------------------------------------------------------->
<schema xmlns="http://www.w3.org/2001/XMLSchema" xmlns:xs="http://www.w3.org/2001/XMLSchema"
	targetNamespace="http://www.wikisquare.de/AtlasML" xmlns:aml="http://www.wikisquare.de/AtlasML"
	elementFormDefault="qualified">

	<xs:complexType name="translationType">
		<annotation>
			<documentation>
				This type defines the often used translationTyp. The
				translationTyp represents a string in multiple
				languages. At least
				one translation has to be given.
        	</documentation>
		</annotation>
		<xs:sequence>
			<xs:element name="translation" minOccurs="1" maxOccurs="unbounded">
				<xs:complexType>
					<xs:simpleContent>
						<xs:extension base="xs:string">
							<xs:attribute name="lang" type="language" use="required" />
						</xs:extension>
					</xs:simpleContent>
				</xs:complexType>
			</xs:element>
		</xs:sequence>
	</xs:complexType>


	<xs:complexType name="rasterLayerType">
		<xs:sequence maxOccurs="1" minOccurs="1">
			<xs:element name="name" type="aml:translationType"
				minOccurs="1" maxOccurs="1">
				<annotation>
					<documentation>
						Translations of the name
					</documentation>
				</annotation>
			</xs:element>
			<xs:element name="desc" minOccurs="1" maxOccurs="1"
				type="aml:translationType">
				<annotation>
					<documentation>
						Translations of the description
					</documentation>
				</annotation>
			</xs:element>
			<xs:element name="keywords" minOccurs="0" maxOccurs="1"
				type="aml:translationType">
				<annotation>
					<documentation>
						Translations of the keywords
					</documentation>
				</annotation>
			</xs:element>
			<xs:element name="dataDirname" type="string" minOccurs="1"
				maxOccurs="1" />
			<xs:element name="filename" type="string" minOccurs="1"
				maxOccurs="1">
				<annotation>
					<documentation>
						Filename of the GeoTIFF (without path)
					</documentation>
				</annotation>
			</xs:element>
			<element name="rasterLegendData" type="aml:rasterLegendDataType"
				maxOccurs="1" minOccurs="1">
			</element>

			<xs:element name="transparentColor" type="string"
				maxOccurs="1" minOccurs="0">
				<annotation>
					<documentation>
						transparentColor describes a Color that will be
						interpreted as transparent. If not provided,
						then the NoData Values
						will be transparent.
						transparentColor can be used if the image
						contains no NoData values, but a color like
						black or white. Values
						can be given

						Drei Moeglichekeiten gibt es fuer das Format des
						Strings: "RGB(red,green, blue)" wobei red,green
						und blue dezimale
						Werte zwischen 0 und 255 sind.

						Der String stellt einen Integer-Wert
						im
						dezimalen, oktalen oder hexadezimalen Format
						dar, aus dem die 3
						RGB-Werte extrahiert werden
						(siehe {@link Color#decode(String)
						Color.decode(..)}).

						Der String spezifiziert ein statisches Feld der
						Klasse {@link Color}. z.B. steht "RED" fuer
						{@link Color#RED
						Color.RED}, "darkGray" fuer
						{@link Color#darkGray Color.darkGray}
						oder
						"LIGHT_GRAY" fuer {@link Color#LIGHT_GRAY
						Color.LIGHT_GRAY}

					</documentation>
				</annotation>
			</xs:element>
		</xs:sequence>
		<xs:attribute name="id" type="ID" use="required" />
		<attribute name="exportable" type="boolean"></attribute>
	</xs:complexType>




	<xs:complexType name="rasterPyramidLayerType">
		<xs:sequence maxOccurs="1" minOccurs="1">
			<xs:element name="name" type="aml:translationType"
				minOccurs="1" maxOccurs="1">
				<annotation>
					<documentation>
						Translations of the name
					</documentation>
				</annotation>
			</xs:element>
			<xs:element name="desc" minOccurs="1" maxOccurs="1"
				type="aml:translationType">
				<annotation>
					<documentation>
						Translations of the description
					</documentation>
				</annotation>
			</xs:element>
			<xs:element name="keywords" type="aml:translationType"
				maxOccurs="1" minOccurs="0" />
			<xs:element name="dataDirname" type="string" minOccurs="1"
				maxOccurs="1" />
			<xs:element name="filename" type="string" minOccurs="1"
				maxOccurs="1">
				<annotation>
					<documentation>
						Filename of the .properties file (without path)
					</documentation>
				</annotation>
			</xs:element>
			<element name="rasterLegendData" type="aml:rasterLegendDataType"
				maxOccurs="1" minOccurs="0">
			</element>
			<xs:element name="transparentColor" type="string"
				maxOccurs="1" minOccurs="0">
				<annotation>
					<documentation>
						transparentColor describes a Color that will be
						interpreted as transparent. If not provided,
						then the NoData Values
						will be transparent.
						transparentColor can be used if the image
						contains no NoData values, but a color like
						black or white. Values
						can be given

						Drei Moeglichekeiten gibt es fuer das Format des
						Strings: "RGB(red,green, blue)" wobei red,green
						und blue dezimale
						Werte zwischen 0 und 255 sind.

						Der String stellt einen Integer-Wert
						im
						dezimalen, oktalen oder hexadezimalen Format
						dar, aus dem die 3
						RGB-Werte extrahiert werden
						(siehe {@link Color#decode(String)
						Color.decode(..)}).

						Der String spezifiziert ein statisches Feld der
						Klasse {@link Color}. z.B. steht "RED" fuer
						{@link Color#RED
						Color.RED}, "darkGray" fuer
						{@link Color#darkGray Color.darkGray}
						oder
						"LIGHT_GRAY" fuer {@link Color#LIGHT_GRAY
						Color.LIGHT_GRAY}

					</documentation>
				</annotation>
			</xs:element>
		</xs:sequence>
		<xs:attribute name="id" type="ID" use="required" />
		<attribute name="exportable" type="boolean"></attribute>
	</xs:complexType>


	<xs:complexType name="vectorLayerType">
		<xs:sequence maxOccurs="1" minOccurs="1">
			<xs:element name="name" type="aml:translationType"
				minOccurs="1" maxOccurs="1" />
			<xs:element name="desc" minOccurs="1" maxOccurs="1"
				type="aml:translationType" />
			<xs:element name="keywords" type="aml:translationType"
				maxOccurs="1" minOccurs="0" />
			<xs:element name="dataDirname" type="string" minOccurs="1"
				maxOccurs="1" />
			<xs:element name="filename" type="string" maxOccurs="1"
				minOccurs="1" />
			<element name="dataAttribute" type="aml:dataAttributeType"
				maxOccurs="unbounded" minOccurs="0">
			</element>
			<element name="layerStyle" type="aml:LayerStyle" maxOccurs="unbounded"
				minOccurs="0">
				<annotation>
					<documentation>
						Additional styles can optionally be defined for
						a
						layer. Which styles are actually available in
						a map has to be
						defined in the specific map
						tags.
					</documentation>
				</annotation>
			</element>
			<element name="filterRule" type="string" maxOccurs="1"
				minOccurs="0">
				<annotation>
					<documentation>
						A "Martin Schmitz Filter Rule" can be assigned
						for a
						DpLayer. This filter will be applied to
						all used of the layer.
					</documentation>
				</annotation>
			</element>
		</xs:sequence>
		<xs:attribute name="id" type="ID" use="required" />
		<attribute name="exportable" type="boolean"></attribute>
		<attribute name="type" type="string"></attribute>

		<attribute name="showStylerInLegend" type="boolean" use="optional"
			default="false">
			<annotation>
				<documentation>
					by default the style can not be edited from inside the AV. Setting
					this attribute to true will allow the layer's style to be edited
					via AtlasStyler in all maps that it appears in. 
					</documentation>
			</annotation>
		</attribute>
		<attribute name="showFilterInLegend" type="boolean" use="optional"
			default="false">
			<annotation>
				<documentation>
					by default the FilterDialog can not be opened from inside the AV. Setting
					this attribute to true will allow the layer's to be filtered
					in all maps that it appears in. 
					</documentation>
			</annotation>
		</attribute>
		<attribute name="showTableInLegend" type="boolean" use="optional"
			default="false">
			<annotation>
				<documentation>
					By default the datatable can not be viewed from inside the AV. Setting
					this attribute to true will allow the layer's datatable to be viewed
					via AtlasStyler in all maps that it appears in. 
					</documentation>
			</annotation>
			</attribute>

	</xs:complexType>

	<xs:element name="atlas">
		<annotation>
			<documentation>
				The main element that describes an atlas.
			</documentation>
		</annotation>

		<xs:complexType>
			<xs:sequence>
				<xs:element name="name" minOccurs="1" maxOccurs="1"
					type="aml:translationType">
					<annotation>
						<documentation>
							The name of the described Atlas-project Also
							appears in the JavaWebStart JNLP file
						</documentation>
					</annotation>
				</xs:element>

				<xs:element name="desc" minOccurs="1" maxOccurs="1"
					type="aml:translationType">
					<annotation>
						<documentation>
							The description of the Atlas-project Also
							appears in
							the JavaWebStart JNLP file
						</documentation>
					</annotation>
				</xs:element>

				<xs:element name="keywords" type="aml:translationType"
					maxOccurs="1" minOccurs="0" />

				<xs:element name="creator" minOccurs="1" maxOccurs="1"
					type="aml:translationType">
					<annotation>
						<documentation>
							The Creator or Contact-adress of this
							Atlas-project
							Also appears in the
							JavaWebStart JNLP file
						</documentation>
					</annotation>
				</xs:element>

				<xs:element name="copyright" minOccurs="1" maxOccurs="1"
					type="aml:translationType">
					<annotation>
						<documentation>
							The copyright note for this Atlas-project
							Also
							appears in the JavaWebStart JNLP file
						</documentation>
					</annotation>
				</xs:element>

				<xs:element name="atlasversion" minOccurs="1" maxOccurs="1"
					type="decimal">
					<annotation>
						<documentation>
							The Version of the Atlas, e.g. 2.0
						</documentation>
					</annotation>
				</xs:element>




				<xs:element name="supportedLanguages" minOccurs="1"
					maxOccurs="1">
					<annotation>
						<documentation>
							A list of languages that are supported by
							this atlas
						</documentation>
					</annotation>
					<xs:complexType>
						<xs:sequence>
							<xs:element name="language" minOccurs="1" maxOccurs="unbounded">
								<xs:complexType>
									<xs:attribute name="lang" type="language" use="required" />
								</xs:complexType>
							</xs:element>
						</xs:sequence>
					</xs:complexType>
				</xs:element>
				<sequence maxOccurs="unbounded" minOccurs="0">
					<choice maxOccurs="1" minOccurs="1">
						<xs:element name="vectorLayer" type="aml:vectorLayerType"
							minOccurs="0" maxOccurs="unbounded">
							<annotation>
								<documentation>
									A vector layer.
								</documentation>
							</annotation>
						</xs:element>
						<xs:element name="rasterLayer" type="aml:rasterLayerType"
							minOccurs="0" maxOccurs="unbounded" />
						<xs:element name="pyramidRasterLayer" type="aml:rasterPyramidLayerType"
							minOccurs="0" maxOccurs="unbounded" />
						<xs:element name="videoMedia" type="aml:videoMediaType"
							maxOccurs="unbounded" minOccurs="0" />
						<element name="pdfMedia" type="aml:pdfMediaType"
							maxOccurs="unbounded" minOccurs="0">
						</element>
					</choice>
				</sequence>
				<element name="mapPool" type="aml:mapPoolType" maxOccurs="1"
					minOccurs="1">
				</element>
				<element name="group" type="aml:groupType" maxOccurs="1"
					minOccurs="1">
					<annotation>
						<documentation>
							The root group for the Atlas.
						</documentation>
					</annotation>
				</element>
			</xs:sequence>
		</xs:complexType>
	</xs:element>


	<complexType name="groupType">
		<annotation>
			<documentation>
				A groupType tag can hold datapoolRefs to
				DatapoolEntrys,
				other (sub)groups and mapRefs to Maps
			</documentation>
		</annotation>
		<sequence maxOccurs="1" minOccurs="1">
			<element name="name" type="aml:translationType" maxOccurs="1"
				minOccurs="1">
			</element>
			<element name="desc" type="aml:translationType" maxOccurs="1"
				minOccurs="1">
			</element>
			<element name="keywords" type="aml:translationType"
				maxOccurs="1" minOccurs="0">
			</element>
			<sequence maxOccurs="unbounded" minOccurs="0">
				<choice>
					<element name="datapoolRef" type="aml:datapoolRefType"
						maxOccurs="unbounded" minOccurs="0">
					</element>
					<element name="group" type="aml:groupType" maxOccurs="unbounded"
						minOccurs="0">
					</element>
					<element name="mapRef" type="aml:mapRefType" maxOccurs="unbounded"
						minOccurs="0">
					</element>
				</choice>
			</sequence>
		</sequence>
	</complexType>



	<complexType name="datapoolRefType">
		<annotation>
			<documentation>
				datapoolRefType references a DatapoolEntry by its ID
			</documentation>
		</annotation>
		<attribute name="id" type="IDREF" use="required">
			<annotation>
				<documentation>ID to the DatapoolEntry</documentation>
			</annotation>
		</attribute>
		<attribute name="minimizeInLegend" type="boolean" use="optional"
			default="false" />
		<attribute name="hideInLegend" type="boolean" use="optional"
			default="false" />
	</complexType>


	<complexType name="videoMediaType">
		<annotation>
			<documentation>
				Describes VIDEO document as a DatapoolEntry
			</documentation>
		</annotation>
		<sequence>
			<element name="name" type="aml:translationType"></element>
			<element name="desc" type="aml:translationType"></element>
			<xs:element name="keywords" type="aml:translationType"
				maxOccurs="1" minOccurs="0" />
			<element name="dataDirname" type="string"></element>
			<element name="filename" type="string"></element>
		</sequence>
		<attribute name="id" type="ID"></attribute>
		<attribute name="exportable" type="boolean"></attribute>
	</complexType>



	<complexType name="pdfMediaType">
		<annotation>
			<documentation>
				Describes a PDF as a DatapoolEntry. Prefere Cinepack
				coded AVIs
			</documentation>
		</annotation>
		<sequence>
			<element name="name" type="aml:translationType"></element>
			<element name="desc" type="aml:translationType"></element>
			<xs:element name="keywords" type="aml:translationType"
				maxOccurs="1" minOccurs="0" />
			<element name="dataDirname" type="string"></element>
			<element name="filename" type="string"></element>
		</sequence>
		<attribute name="id" type="ID"></attribute>
		<attribute name="exportable" type="boolean"></attribute>
	</complexType>




	<complexType name="mapType">
		<annotation>
			<documentation></documentation>
		</annotation>
		<sequence maxOccurs="1" minOccurs="1">
			<xs:element name="name" type="aml:translationType"
				minOccurs="1" maxOccurs="1">
				<annotation>
					<documentation>
						Translations of the name
					</documentation>
				</annotation>
			</xs:element>
			<xs:element name="desc" minOccurs="1" maxOccurs="1"
				type="aml:translationType">
				<annotation>
					<documentation>
						Translations of the description
					</documentation>
				</annotation>

			</xs:element>

			<element name="keywords" type="aml:translationType"
				maxOccurs="1" minOccurs="0" />

			<element name="startViewEnvelope" type="string" maxOccurs="1"
				minOccurs="0">
				<annotation>
					<documentation>
						This optinal tag defines the envelope that a map
						will be shown with when it is opened. The format
						is: lowerx,lowery
						upperx,uppery
					</documentation>
				</annotation>
			</element>
			<sequence maxOccurs="unbounded" minOccurs="0">
				<element name="datapoolRef" type="aml:datapoolRefType">
					<annotation>
						<documentation>
							Links to all the Layers that are included in
							the
							Map. Attention: datapoolRefType allows
							any IDs by the Schema. Only
							links to Layers
							make sense.
						</documentation>
					</annotation>
				</element>
			</sequence>
			<element name="additionalStyles" type="aml:additionalStylesForMapType"
				maxOccurs="unbounded" minOccurs="0">
			</element>
		</sequence>
		<attribute name="id" type="ID">
			<annotation>
				<documentation>
					The id that identifies this Map
				</documentation>
			</annotation>
		</attribute>
	</complexType>

	<complexType name="mapPoolType">
		<annotation>
			<documentation>
				Contains a sequence of at least one Map
			</documentation>
		</annotation>

		<sequence maxOccurs="unbounded" minOccurs="0">
			<annotation>
				<documentation>
					At least one map please has to be defined, which
					will
					then be opened on startup.
				</documentation>
			</annotation>
			<element name="map" type="aml:mapType">
				<annotation>
					<documentation>
						A sequence of maps is allowed to be defined here
					</documentation>
				</annotation>
			</element>
		</sequence>
		<attribute name="startMap" type="IDREF"></attribute>
	</complexType>

	<complexType name="mapRefType">
		<attribute name="id" type="IDREF"></attribute>
	</complexType>

	<complexType name="dataAttributeType">

		<sequence>
			<element name="name" type="aml:translationType" maxOccurs="1"
				minOccurs="1">
			</element>
			<element name="desc" type="aml:translationType" maxOccurs="1"
				minOccurs="0">
			</element>

		</sequence>
		<attribute name="col" use="required" type="short">
			<annotation>
				<documentation>
					required column index in the table/database
				</documentation>
			</annotation>
		</attribute>
		<attribute name="unit" use="required" type="string">
			<annotation>
				<documentation>optional unit string</documentation>
			</annotation>
		</attribute>
		<attribute name="visible" use="required" type="boolean">
			<annotation>
				<documentation>
					will this column be visible in the AtlasViewer?
				</documentation>
			</annotation>
		</attribute>

	</complexType>

	<complexType name="rasterLegendDataType">
		<sequence maxOccurs="unbounded" minOccurs="0">
			<element name="rasterLegendItem" type="aml:rasterLegendItemType">
			</element>
		</sequence>
		<attribute name="paintGaps" type="boolean"></attribute>
	</complexType>

	<complexType name="rasterLegendItemType">
		<sequence>
			<element name="label" type="aml:translationType"></element>
		</sequence>
		<attribute name="value" type="double"></attribute>
	</complexType>

	<complexType name="LayerStyle">
		<annotation>
			<documentation>
				A LayerStyle is a SLD Style used to style a layer. It
				is
				offered to the user from the Legend Tool Menu with
				translated name
				and description.
			</documentation>
		</annotation>
		<sequence>
			<element name="title" type="aml:translationType">
				<annotation>
					<documentation>
						Translations for the name of this style
					</documentation>
				</annotation>
			</element>
			<element name="desc" type="aml:translationType">
				<annotation>
					<documentation>
						Translations for the description of this style
					</documentation>
				</annotation>
			</element>
		</sequence>
		<attribute name="filename" type="string">
			<annotation>
				<documentation>
					The filename of this style file. Ending with .sld
					Names like basename.003.sld are common.
				</documentation>
			</annotation>
		</attribute>
		<attribute name="id" type="ID">
			<annotation>
				<documentation>
					At the moment the filename is used as ID
				</documentation>
			</annotation>
		</attribute>
	</complexType>

	<complexType name="additionalStylesForMapType">
		<sequence>
			<element name="styleid" type="string" maxOccurs="unbounded"
				minOccurs="0">
			</element>
		</sequence>
		<attribute name="layerID" type="IDREF"></attribute>
		<attribute name="selectedStyleID" type="IDREF"></attribute>
	</complexType>

</schema>
