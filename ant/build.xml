<!--
  Copyright (c) 2010 Stefan A. Krüger (soon Stefan A. Tzeggai)
  
  This file is part of the Geopublisher application - An authoring tool to facilitate the publication and distribution of geoproducts in form of online and/or offline end-user GIS.
  http://www.geopublishing.org
  
  Geopublisher is part of the Geopublishing Framework hosted at:
  http://wald.intevation.org/projects/atlas-framework/
  
  This program is free software; you can redistribute it and/or
  modify it under the terms of the GNU General Public License
  as published by the Free Software Foundation; either version 3 of the License, or (at your option) any later version.
  
  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.
  
  You should have received a copy of the GNU General Public License (license.txt)
  along with this program; if not, write to the Free Software
  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
  or try this link: http://www.gnu.org/licenses/gpl.html
  
-->
<project xmlns:ac="antlib:net.sf.antcontrib" default="jar" basedir=".." name="Atlas-Geopublishing-Framework">

	<!-- This additional task is nedded to automatically apply pack200 compression -->
	<taskdef name="p200ant" classname="de.matthiasmann.p200ant.P200AntTask" classpath="ant/p200ant.jar" />
	<taskdef uri="antlib:net.sf.antcontrib" classpath="ant/ant-contrib-1.0b2.jar" />

	<property environment="env" />
	<property name="GTversion" value="2.6-SNAPSHOT" />
	<property name="GP.location" value="." />
	<property name="SM.location" value="/home/stefan/EigeneDateien/code/schmitzm/trunk" />
	<property name="dist.dir" value="dist" />
	<property name="GP.JAVADOC" value="${dist.dir}/javadoc" />
	<property name="GP.build" value="${GP.location}/bin" />
	<property name="GP.src" value="${GP.location}/src" />
	<property name="GP.lib" value="${GP.location}/lib" />
	<property name="GT.26x" value="/home/stefan/EigeneDateien/code.svn/geotools/2.6.x" />
	<property name="GP.exportJWS" value="dist/export_jws" />
	<property name="GP.exportAlone" value="dist/export_standalone" />
	<property name="GP.exportAlone.zip" value="${GP.exportAlone}/Geopublisher_and_AtlasStyler_with_all_dependencies.zip" />
	<property name="release_path" value="gp" />

	<!-- Optionally tell us where the ISDSS Utility project is stored 
	<property name="IMPETUS.UTILITY" value="../ImpetusUtility" />
	-->

	<!-- Where are the local OpenSymbols stored. This folder is copied over to geopublishing.org  -->
	<property name="OS.location" value="/home/stefan/EigeneDateien/code/atlas/trunk/openmapsymbols" />

	<property name="debuglevel" value="source,lines,vars" />
	<property name="target" value="1.6" />
	<property name="source" value="1.6" />

	<!-- Properties for signing the jar with the IMPETUS certificate -->
	<property name="sign.alias" value="IMPETUS" />
	<property name="sign.password" value="wasser" />
	<property name="sign.file.name" value="${GP.src}/skrueger/creator/export/keystore" />

	<!-- ================================= 
	          target: clean : Clean the compiled classes, created ZIPs and exported JARs              
	     ================================= -->
	<target name="clean" depends="newBuild">
		<delete dir="${GP.build}" failonerror="false" />
		<delete dir="${GP.exportAlone}" failonerror="false" />
		<delete file="${GP.exportAlone.zip}" failonerror="false" />
		<delete dir="${dist.dir}" failonerror="false" />
	</target>

	<target name="refreshSchmitzm" description="Tries to compile and update schmitzm-2.0.x.jar. ">

		<echo message="Trying to build schmitzm" />
		<exec executable="ant" failifexecutionfails="false">
			<arg line='-f ${SM.location}/build.xml jar' />
		</exec>

		<copy todir="${GP.lib}Unsigned" failonerror="false">
			<fileset file="${SM.location}/dist/schmitzm-2.0.x.jar" />
		</copy>

		<copy todir="${GP.lib}" failonerror="true">
			<fileset file="${SM.location}/dist/schmitzm-2.0.x.jar" />
		</copy>

	</target>

	<target name="newBuild" description="Update the release.properties and build.number file">
		<tstamp />

		<!-- Reads the number, sets ${build.number} and increases the number in the file -->
		<buildnumber file="${GP.src}/build.number" />
		<!-- Reads the number, sets ${build.number} and increases the number in the file. No real idea why we do it twice.. 
		well, because we are not interested in the build-version of the last build and the task only updates 
		the number afterwards.. -->

		<buildnumber file="${GP.src}/build.number" />
		<property file="${GP.src}/release.properties" />

		<input message="Enter MAJOR build version number:" defaultvalue="${maj.version}" addproperty="maj.versionNEW" />
		<input message="Enter MINOR build version number:" defaultvalue="${min.version}" addproperty="min.versionNEW" />

		<echo message="version new = ${maj.versionNEW} ${min.versionNEW} BUILD:${build.number}" />

		<property name="maj.version" value="${maj.versionNEW}" />
		<property name="min.version" value="${min.versionNEW}" />

		<propertyfile file="${GP.src}/release.properties" comment="Properties describing this release/build">
			<entry key="min.version" type="int" value="${min.versionNEW}" />
			<entry key="maj.version" type="int" value="${maj.versionNEW}" />
			<entry key="datetime" type="date" value="now" />
			<entry key="build" value="${build.number}" />
		</propertyfile>

		<echo message="version new = ${maj.versionNEW} ${min.versionNEW}" />

		<property file="${GP.src}/release.properties" />

		<echo message="Now building version ${maj.versionNEW}.${min.versionNEW} b${build.number} (${datetime})" />
		<echo message="  gegencheck         ${maj.version}.${min.version} b${build.number} (${datetime})" />
	</target>

	<target name="nativeToAscii" description="Wandelt alle .properties dateien in src/ in ascii UTF8 um.">
		<ac:for xmlns:ac="antlib:net.sf.antcontrib" param="file">
			<path>
				<fileset dir="${GP.src}" includes="**/*.properties" />
			</path>
			<sequential>
				<move file="@{file}" overwrite="true" tofile="@{file}Native" verbose="false" />
			</sequential>
		</ac:for>
		<native2ascii encoding="ISO8859_15" src="${GP.src}" includes="**/*.propertiesNative" dest="${GP.src}" ext=".properties" />

		<ac:for xmlns:ac="antlib:net.sf.antcontrib" param="file">
			<path>
				<fileset dir="${GP.src}" includes="**/*.propertiesNative" />
			</path>
			<sequential>
				<delete file="@{file}" quiet="true" />
			</sequential>
		</ac:for>
	</target>

	<!-- ================================= 
	          target: init - Copy resource files from the source folder to the ouput directory              
	     ================================= -->
	<target name="init" depends="clean, refreshSchmitzm, nativeToAscii">
		<mkdir dir="${GP.build}" />
		<mkdir dir="${dist.dir}" />

		<copy todir="${GP.build}" includeemptydirs="false">
			<fileset dir="${GP.src}">
				<exclude name="**/*.launch" />
				<exclude name="**/*.java" />
				<exclude name="**/*.xcf" />
				<exclude name="**/Thumbs.db" />
				<exclude name="**/*~" />
				<exclude name="**/*.bak" />
			</fileset>
		</copy>

	</target>


	<!-- ================================= 
	          target: compile - Compile all (Geopublisher, AtlasStyler, AtlasViewer)              
	     ================================= -->
	<target name="compile" depends="init">
		<echo message="Compile all (Geopublisher, AtlasStyler, AtlasViewer)" />
		<javac srcdir="${GP.src}" destdir="${GP.build}" debug="true" debuglevel="${debuglevel}" source="${source}" target="${target}">
			<classpath refid="AtlasFramewok_CLASSPATH" />
		</javac>
	</target>


	<!-- ================================= 
	          target: clean_jws_cache - On linux this target deletes the local JavaWebStart cache which fixes a lot a problems              
	     ================================= -->
	<target name="clean_jws_cache">
		<echo message="Empty JWS cache" />
		<exec executable="/usr/bin/javaws" failifexecutionfails="false">
			<arg line='-uninstall' />
		</exec>
	</target>


	<target name="jar" depends="compile" description="Creates three JARs for: AtlasViewer, Geopublisher and AtlasStyler. And updates Schmitzm. And copies the new JARs to ISDSS if available.">

		<!--Create a Manifest that lists all the other JARs -->
		<path id="manifest_cp">
			<fileset dir="${GP.lib}">
				<include name="*.jar" />
				<include name="**/*.jar" />
				<!--			<include name="gt2-${GTversion}/*.jar" /> -->
			</fileset>
		</path>

		<echo message="GP.lib = ${GP.lib}" />

		<property name="absLibPath" location="${GP.lib}" />
		<echo message="absLibPath = ${absLibPath}" />

		<pathconvert property="classpath1" refid="manifest_cp" pathsep=" " dirsep="/">
			<map from="${absLibPath}" to="lib" />
		</pathconvert>

		<echo message="Nachher = ${classpath1}" />

		<property name="classpath" value="lib/schmitzm-2.0.x.jar ${classpath1}" />
		<property name="classpath_mitgp" value="lib/schmitzm-2.0.x.jar gp.jar ${classpath1}" />

		<echo message="Create gp.jar in ${dist.dir}" />
		<jar destfile="${dist.dir}/gp.jar" level="4" duplicate="preserve" index="false">
			<fileset dir="${GP.build}" includes="**/*" />
			<!--<indexjars refid="manifest_cp" /> http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=6732405-->
			<manifest>
				<attribute name="Main-Class" value="skrueger.creator.AtlasCreator" />
				<attribute name="Class-Path" value="${classpath}" />
				<attribute name="SplashScreen-Image" value="deploy/startGP.gif" />
				<attribute name="Created-By" value="Stefan A. Krüger" />
			</manifest>
		</jar>



		<echo message="Create av.jar in ${dist.dir}" />
		<jar destfile="${dist.dir}/av.jar" level="4" duplicate="preserve" index="false">
			<fileset dir="${GP.build}" includes="release.properties, rachel/, org/, skrueger/atlas/, skrueger/sld/, av_log4j.xml" excludes="deploy/" />
			<!-- <indexjars refid="manifest_cp" /> http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=6732405-->
			<manifest>
				<attribute name="Main-Class" value="skrueger.atlas.AtlasViewer" />
				<attribute name="Class-Path" value="${classpath_mitgp}" />
				<attribute name="Created-By" value="Stefan A. Krüger" />
				<attribute name="Comment" value="Contains the classes for the AtlasViewer. Does not contain resources specific to a special atlas." />
			</manifest>

		</jar>



		<echo message="Create as.jar in ${dist.dir}" />
		<jar destfile="${dist.dir}/as.jar" level="4" duplicate="preserve" index="false">
			<!--<indexjars refid="manifest_cp" /> http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=6732405 -->
			<fileset dir="${GP.build}">
				<exclude name="skrueger/creator/export/" />
			</fileset>
			<manifest>
				<attribute name="Main-Class" value="skrueger.sld.gui.AtlasStylerGUI3" />
				<attribute name="Class-Path" value="${classpath_mitgp}" />
				<attribute name="SplashScreen-Image" value="deploy/startAS.gif" />
				<attribute name="Created-By" value="Stefan A. Krüger" />
			</manifest>
		</jar>

		<!-- Try to update av.jar in IMPETUS SDSS before it is signed 
		<copy failonerror="false" todir="${IMPETUS.UTILITY}/lib" file="${dist.dir}/av.jar" />
		<copy failonerror="false" todir="${IMPETUS.UTILITY}/lib" file="${GP.lib}Unsigned/schmitzm-2.0.x.jar" />
-->

		<!-- TEMP
-->
		<antcall target="signAndPack_jars" />

		<antcall target="create_standalone_zip" />
		<!-- These two JARs are needed on the app's root dir to export with the GP from a running  Eclipse session -->
		<copy todir="." file="${dist.dir}/av.jar" />
		<copy todir="." file="${dist.dir}/av.jar.pack.gz" failonerror="false" />
		<copy todir="." file="${dist.dir}/gp.jar" />
		<copy todir="." file="${dist.dir}/gp.jar.pack.gz" failonerror="false" />

	</target>


	<target name="signAndPack_jars" description="Sign and pack200 (schmitzm|av|as|gp).jar">

		<ac:for xmlns:ac="antlib:net.sf.antcontrib" param="file" parallel="true" threadcount="2">
			<path>
				<fileset dir="${dist.dir}" includes="gp.jar, as.jar, av.jar" />
				<fileset dir="${GP.lib}" includes="schmitzm-2.0.x.jar" />
			</path>
			<sequential>
				<p200ant repack="true" segmentLimit="0" srcfile="@{file}" />
				<signjar jar="@{file}" alias="${sign.alias}" keystore="${sign.file.name}" storepass="${sign.password}" preservelastmodified="true" />
				<p200ant segmentLimit="0" srcfile="@{file}" />
			</sequential>
		</ac:for>

	</target>


	<target name="copy_jws_libs" description="Copy all libs  to the export JWS folder.">
		<delete dir="${GP.exportJWS}/lib" failonerror="false" />
		<mkdir dir="${GP.exportJWS}/lib" />
		<copy todir="${GP.exportJWS}/lib" includeemptydirs="false">
			<fileset dir="${GP.lib}" />
		</copy>
	</target>


	<!-- http://frank.neatstep.com/node/29 -->
	<macrodef name="unsignjar">

		<attribute name="jar" />

		<sequential>
			<!-- Remove any existing signatures from a JAR file. -->

			<ac:var name="temp.file" unset="true" value="" />
			<tempfile prefix="usignjar-" destdir="${java.io.tmpdir}" property="temp.file" />
			<echo message=" ${temp.file}  @{jar}" />

			<unjar src="@{jar}" dest="${temp.file}">
				<patternset>
					<include name="**" />
					<exclude name="META-INF/*.SF" />
					<exclude name="META-INF/*.DSA" />
					<exclude name="META-INF/*.RSA" />
				</patternset>
			</unjar>

			<!-- Touch it in case the file didn't have a manifest.
	             Otherwise the JAR task below will fail if the manifest 
		     file doesn't exist. -->
			<mkdir dir="${temp.file}/META-INF" />
			<touch file="${temp.file}/META-INF/MANIFEST.MF" />

			<jar destfile="@{jar}.unsigned" basedir="${temp.file}" includes="**" manifest="${temp.file}/META-INF/MANIFEST.MF" />

			<move file="@{jar}.unsigned" overwrite="true" tofile="@{jar}" failonerror="true" />

			<echo message="@{jar} should be unsigned now:" />
			<exec executable="jarsigner">
				<arg line="-verify @{jar}" />
			</exec>

			<delete dir="${temp.file}" failonerror="false" />

		</sequential>
	</macrodef>

	<target name="import_gt26x_libs" description="Compile latest Geotools libs and copy the needed ones over and NOT AUTOMATICALLY signs them by calling signAndPack_allLibs">


		<exec executable="mvn" failifexecutionfails="true" description="Testing and building new JARs">
			<arg line='-f ${GT.26x}/pom.xml clean package -Dall' />
		</exec>

		<!--
		<exec executable="mvn" failifexecutionfails="true" description="Testing and building new JARs">
			<arg line='-f ${GT.26x}/modules/unsupported/shapefile-renderer/pom.xml clean package -Dall' />
		</exec>
		<copy overwrite="yes" file="${GT.26x}/modules/unsupported/shapefile-renderer/target/gt-shapefile-renderer-2.6-SNAPSHOT.jar" tofile="${GT.26x}/target/binaries" />
-->
		<delete dir="${GP.lib}/gt" excludes=".svn" verbose="true" />

		<delete dir="${GT.26x}/target/gt" description="Deleting the old target/gt dir." />
		<move overwrite="yes" file="${GT.26x}/target/binaries" tofile="${GT.26x}/target/gt" />

		<property file="${GP.src}/skrueger/creator/export/geopublisher.properties" prefix="geopublisher.properties" />
		<echo>Value of geopublisher.properties ${geopublisher.properties.ClassPathLibs}</echo>

		<copy todir="${GP.lib}" failonerror="false" description="Copy the files referenced by the classpath to lib" verbose="true">
			<fileset dir="${GT.26x}/target/" includes="${geopublisher.properties.ClassPathLibs}" />
		</copy>

		<move file="${GT.26x}/target/gt" tofile="${GT.26x}/target/binaries" failonerror="false" />

		<delete dir="${GT.26x}/target/gt" description="Deleting the old target/gt dir." />

		<antcall target="gt26x_sourcesZip" description="Calling ant task to create an updated src zip" />

	</target>



	<target name="signAndPack_allLibs" description="Sign and pack200 ALL libs in ${GP.lib}">

		<jar destfile="${GP.lib}/natives.jar" basedir="${GP.lib}/native" includes="**" />

		<ac:for param="file" parallel="false" threadcount="3">
			<path>
				<fileset dir="${GP.lib}">
					<include name="**/*.jar" />
					<include name="*.jar" />
				</fileset>
			</path>
			<sequential>

				<unsignjar jar="@{file}" />

				<p200ant repack="true" segmentLimit="0" srcfile="@{file}" />
				<signjar jar="@{file}" alias="${sign.alias}" keystore="${sign.file.name}" storepass="${sign.password}" preservelastmodified="true" />
				<p200ant segmentLimit="0" srcfile="@{file}" />
				<echo message="@{file} should be SIGNED now:" />
				<exec executable="jarsigner" failonerror="true">
					<arg line="-verify @{file}" />
				</exec>

			</sequential>
		</ac:for>

		<delete description="natives.jar.pack.gz doesn't have any advantage over the .jar file, do we delete it." file="${GP.lib}/natives.jar.pack.gz" failonerror="false" />

	</target>


	<!-- ================================= 
	          target: export_full - Fully export the Geopublisher and AtlasStyler to ${GP.exportJWS}. All JWS Libs will be signed               
	     ================================= -->
	<target name="export_full" description="Fully export the Geopublisher and AtlasStyler to ${GP.exportJWS}.">

		<echo message="Fully export the Geopublisher and AtlasStyler to ${GP.exportJWS}. All JWS libs will be signed" />

		<delete failonerror="false">
			<fileset dir="${GP.exportJWS}" includes="*" />
		</delete>

		<mkdir dir="${GP.exportJWS}" />

		<antcall target="export_quick" />

		<antcall target="copy_jws_libs" />

	</target>


	<!-- ================================= 
	          target: export_full - Export the Geopublisher and AtlasStyler to ${GP.exportJWS}. NO libs will touched.               
	     ================================= -->
	<target name="export_quick" depends="jar" description="Quickly export GP and AS to ${GP.exportJWS}.">

		<echo message="Quickly export the Geopublisher and AtlasStyler to ${GP.exportJWS}." />

		<!--    Copy auxiliary files -->
		<delete failonerror="false" file="${GP.exportJWS}/index.html" />
		<delete failonerror="false" file="${GP.exportJWS}/version.txt" />
		<delete failonerror="false" file="${GP.exportJWS}/as.jnlp" />
		<delete failonerror="false" file="${GP.exportJWS}/gp.jnlp" />
		<delete failonerror="false" file="${GP.exportJWS}/startGP.gif" />
		<delete failonerror="false" file="${GP.exportJWS}/startAS.gif" />
		<delete failonerror="false" file="${GP.exportJWS}/icon64_AS.gif" />
		<delete failonerror="false" file="${GP.exportJWS}/icon64_GP.gif" />
		<delete failonerror="false" file="${GP.exportJWS}/splashscreenGP.jpg" />
		<delete failonerror="false" file="${GP.exportJWS}/splashscreenAS.jpg" />
		<copy todir="${GP.exportJWS}" includeemptydirs="false">
			<fileset dir="${GP.src}/deploy" />
		</copy>

		<replace file="${GP.exportJWS}/gp.jnlp">
			<replacefilter token="@VERSION@" value="${maj.versionNEW}.${min.version}b${build.number}" />
			<replacefilter token="@PATH@" value="${release_path}" />
			<replacefilter token="@GT_VER@" value="${GTversion}" />
		</replace>

		<replace file="${GP.exportJWS}/as.jnlp">
			<replacefilter token="@VERSION@" value="${maj.version}.${min.version}b${build.number}" />
			<replacefilter token="@PATH@" value="${release_path}" />
			<replacefilter token="@GT_VER@" value="${GTversion}" />
		</replace>

		<replace file="${GP.exportJWS}/index.html">
			<replacefilter token="@MAJOR@" value="${maj.version}" />
			<replacefilter token="@MINOR@" value="${min.version}" />
			<replacefilter token="@BUILD@" value="${build.number}" />
			<replacefilter token="@DATE@" value="${datetime}" />
		</replace>

		<!-- Diese Datei wird dann von Drupal aufgelesen-->
		<replace file="${GP.exportJWS}/version.txt">
			<replacefilter token="@MAJOR@" value="${maj.versionNEW}" />
			<replacefilter token="@MINOR@" value="${min.versionNEW}" />
			<replacefilter token="@BUILD@" value="${build.number}" />
			<replacefilter token="@DATE@" value="${datetime}" />
		</replace>

		<!-- Copy packed and sigend (av,as,gp).jar to the ${GP.exportJWS} directory -->
		<echo message="Copy packed and sigend (av,as,gp).jar to the ${GP.exportJWS} directory" />
		<mkdir dir="${GP.exportJWS}" />
		<copy file="${dist.dir}/av.jar" todir="${GP.exportJWS}" />
		<copy file="${dist.dir}/av.jar.pack.gz" todir="${GP.exportJWS}" failonerror="false" />
		<copy file="${dist.dir}/as.jar" todir="${GP.exportJWS}" />
		<copy file="${dist.dir}/as.jar.pack.gz" todir="${GP.exportJWS}" failonerror="false" />
		<copy file="${dist.dir}/gp.jar" todir="${GP.exportJWS}" />
		<copy file="${dist.dir}/gp.jar.pack.gz" todir="${GP.exportJWS}" failonerror="false" />

		<!-- Copy packed and sigend schmitzm-2.0.x.jar to the lib directory -->
		<echo message="Copy packed and sigend schmitzm-2.0.x.jar to the ${GP.exportJWS}/lib directory" />
		<mkdir dir="${GP.exportJWS}/lib" />
		<copy file="${GP.lib}/schmitzm-2.0.x.jar" todir="${GP.exportJWS}/lib" />
		<copy file="${GP.lib}/schmitzm-2.0.x.jar.pack.gz" todir="${GP.exportJWS}/lib" failonerror="false" />
		<copy file="${GP.src}/skrueger/creator/export/htaccess" tofile="${GP.exportJWS}/.htaccess" failonerror="true" />

		<!-- Set permissions that allow a web-server to serve these files -->
		<chmod perm="ugo+rx">
			<fileset dir="${GP.exportJWS}" />
		</chmod>

	</target>


	<!-- ================================= 
          target: rsync_quick : Rsync atlas-framework + lib/schmitzm-2.0.x.jar WITHOUT libs/* to prodi and empty JWS cache              
         ================================= -->
	<target name="rsync_quick" depends="export_quick">

		<echo message="Rsync quick ${GP.exportJWS}, ignoring lib* " />
		<exec executable="/usr/bin/rsync">
			<arg line='-mrcv --include=".htaccess" --exclude="*~" --exclude=".svn*" --exclude="lib*" ${GP.exportJWS}/. prodi:${release_path}' />
		</exec>

		<!-- rsync quick usually does NOT update anthing from the lib directory. BUT schmitzm is special, so we update it everytime -->
		<exec executable="/usr/bin/rsync">
			<arg line='-mrcv --include="schmitzm-2.0.x.jar*" --exclude="*" ${GP.exportJWS}/lib/. prodi:${release_path}/lib' />
		</exec>

		<!--
		Since Java 1.6u14 this is not needed any more and the updates usually work
		<antcall target="clean_jws_cache" />
		-->

		<echo message="Rsync Standalone-ZIP" />
		<exec executable="/usr/bin/rsync">
			<arg line='-mrcv ${GP.exportAlone.zip} prodi:${release_path}' />
		</exec>

		<echo message="New version online = ${maj.versionNEW} ${min.versionNEW} BUILD:${build.number}" />
	</target>

	<!-- ================================= 
          target: rsync_quick : Rsync atlas-framework + lib/schmitzm-2.0.x.jar WITHOUT libs/* to prodi and empty JWS cache              
         ================================= -->
	<target name="rsync_quick_local" depends="export_quick">

		<!-- chaning the URL to 192.168.42.103 -->
		<replace file="${GP.exportJWS}/gp.jnlp">
			<replacefilter token="www.geopublishing.org" value="192.168.42.103" />
		</replace>

		<replace file="${GP.exportJWS}/as.jnlp">
			<replacefilter token="www.geopublishing.org" value="192.168.42.103" />
		</replace>


		<echo message="Rsync local quick ${GP.exportJWS}, ignoring lib* " />
		<exec executable="/usr/bin/rsync">
			<arg line='-mrcv --include=".htaccess" --exclude="*~" --exclude=".svn*" --exclude="lib*" ${GP.exportJWS}/. /var/www/${release_path}' />
		</exec>

		<!-- rsync quick usually does NOT update anthing from the lib directory. BUT schmitzm is special, so we update it everytime -->
		<exec executable="/usr/bin/rsync">
			<arg line='-mrcv --include="schmitzm-2.0.x.jar*" --exclude="*" ${GP.exportJWS}/lib/. /var/www/${release_path}/lib' />
		</exec>

		<!--
		Since Java 1.6u14 this is not needed any more and the updates usually work
		<antcall target="clean_jws_cache" />
		-->

		<echo message="Rsync Standalone-ZIP" />
		<exec executable="/usr/bin/rsync">
			<arg line='-mrcv ${GP.exportAlone.zip} /var/www/${release_path}' />
		</exec>

		<echo message="New version local = ${maj.versionNEW} ${min.versionNEW} BUILD:${build.number}" />
	</target>


	<!-- ================================= 
          target: rsync_full : Rsync atlas-framework and all libs to Prodi; Old files will be deleted at prodi; empty JWS cache; create javadoc              
         ================================= -->
	<target name="rsync_full" depends="export_full">

		<echo message="Rsync full ${GP.exportJWS}, including lib* " />

		<exec executable="/usr/bin/rsync">
			<arg line='-mrcv --del  --include=".htaccess" --exclude="*~" --exclude="lib/GT-2.6-SNAPSHOT-sources.zip" --exclude=".svn*" --exclude="openmapsymbols*" ${GP.exportJWS}/. prodi:${release_path}' />
		</exec>

		<echo message="Rsync Standalone-ZIP" />
		<exec executable="/usr/bin/rsync">
			<arg line='-mrcv ${GP.exportAlone.zip} prodi:${release_path}' />
		</exec>

		<!--
		Since Java 1.6u14 this is not needed any more and the updates usually work
		<antcall target="clean_jws_cache" />
		-->

		<!-- They might have been deleted with the last rsync command, so we upload them again -->
		<antcall target="rsync_symbols" />

		<echo message="New version online = ${maj.versionNEW} ${min.versionNEW} BUILD:${build.number}" />
	</target>


	<!-- ================================= 
          target: rsync_full : Rsync atlas-framework and all libs to 192.168.42.103; Old files will be deleted               
         ================================= -->
	<target name="rsync_full_local" depends="export_full">

		<echo message="Rsync full local ${GP.exportJWS}, including lib* " />

		<!-- chaning the URL to 192.168.42.103 -->
		<replace file="${GP.exportJWS}/gp.jnlp">
			<replacefilter token="www.geopublishing.org" value="192.168.42.103" />
		</replace>

		<replace file="${GP.exportJWS}/as.jnlp">
			<replacefilter token="www.geopublishing.org" value="192.168.42.103" />
		</replace>
		<exec executable="/usr/bin/rsync">
			<arg line='-mrcv --del  --include=".htaccess" --exclude="*~" --exclude=".svn*" --exclude="openmapsymbols*" ${GP.exportJWS}/. /var/www/${release_path}' />
		</exec>

		<echo message="Rsync Standalone-ZIP" />
		<exec executable="/usr/bin/rsync">
			<arg line='-mrcv ${GP.exportAlone.zip} /var/www/${release_path}' />
		</exec>

		<!--
		Since Java 1.6u14 this is not needed any more and the updates usually work
		<antcall target="clean_jws_cache" />
		-->

		<!-- They might have been deleted with the last rsync command, so we upload them again -->
		<antcall target="rsync_symbols" />

		<echo message="New version online = ${maj.versionNEW} ${min.versionNEW} BUILD:${build.number}" />
	</target>


	<!-- ================================= 
          target: rsync_symbols              
         ================================= -->
	<target name="rsync_symbols">
		<echo message="Rsync the local symbols from ${OS.location} to PRODI" />

		<delete file="${OS.location}/line/index" />
		<delete file="${OS.location}/point/index" />
		<delete file="${OS.location}/polygon/index" />
		<touch file="${OS.location}/point/index" />
		<touch file="${OS.location}/line/index" />
		<touch file="${OS.location}/polygon/index" />

		<exec executable="/usr/bin/find" dir="${OS.location}/point" output="${OS.location}/point/index">
			<arg line='. -iname "*.sld"' />
		</exec>
		<exec executable="/usr/bin/find" dir="${OS.location}/line" output="${OS.location}/line/index">
			<arg line='. -iname "*.sld"' />
		</exec>
		<exec executable="/usr/bin/find" dir="${OS.location}/polygon" output="${OS.location}/polygon/index">
			<arg line='. -iname "*.sld"' />
		</exec>

		<!-- Set permissions that allow a web-server to serve these files -->
		<chmod perm="ugo+rx">
			<fileset dir="${OS.location}" />
		</chmod>

		<exec executable="/usr/bin/rsync">
			<arg line='-rmcv --delete --exclude=".*" --exclude="*~" --exclude="*.bak" ${OS.location}/. prodi:gp/openmapsymbols ' />
		</exec>

	</target>


	<path id="AtlasFramewok_CLASSPATH">
		<pathelement path="${classpath}" />

		<pathelement location="${GP.location}/bin" />

		<!-- schmitzm MUSS vor Geotools im Classpath liegen -->
		<pathelement path="${GP.lib}/schmitzm-2.0.x.jar" />

		<fileset dir="${GP.lib}">
			<include name="**/*.jar" />
			<include name="*.jar" />
		</fileset>
	</path>


	<!-- ================================= 
          target: create_standalone_zip              
         ================================= -->
	<target name="create_standalone_zip" description="Creates a ZIP with all dependencies to be run locally without JWS.">

		<mkdir dir="${GP.exportAlone}" />

		<!-- Create the ZIP -->
		<zip destfile="${GP.exportAlone.zip}" comment="This ZIP includes the applications Geopublisher and AtlasStyler and all related dependencies. For more information check out http://en.geopublishing.org">
			<zipfileset file="${dist.dir}/as.jar" prefix="Geopublishing" />
			<zipfileset file="${dist.dir}/as.jar.pack.gz" prefix="Geopublishing" />
			<zipfileset file="${dist.dir}/gp.jar" prefix="Geopublishing" />
			<zipfileset file="${dist.dir}/gp.jar.pack.gz" prefix="Geopublishing" />
			<zipfileset file="${dist.dir}/av.jar" prefix="Geopublishing" />
			<zipfileset file="${dist.dir}/av.jar.pack.gz" prefix="Geopublishing" />
			<zipfileset file="${GP.build}/deploy/start_AtlasStyler.bat" prefix="Geopublishing" />
			<zipfileset file="${GP.build}/deploy/start_Geopublisher.bat" prefix="Geopublishing" />
			<zipfileset file="${GP.build}/deploy/start_AtlasStyler.sh" prefix="Geopublishing" />
			<zipfileset file="${GP.build}/deploy/start_Geopublisher.sh" prefix="Geopublishing" />
			<zipfileset file="${GP.build}/deploy/README_standalone.txt" prefix="Geopublishing" />
			<zipfileset dir="${GP.location}" prefix="Geopublishing">
				<include name="lib/**/*.jar" />
				<include name="lib/*.jar" />
				<include name="lib/native/*" />
				<include name="lib/**/*.jar.pack.gz" />
				<include name="lib/*.jar.pack.gz" />
			</zipfileset>
		</zip>
	</target>

	<!-- ================================= 
          target: javadoc - Creates JAVADOC and uploads it to www.geopublishing.org/javadoc               
         ================================= -->
	<target name="javadoc">
		<!-- Destination for JavaDoc and its ZIP -->
		<property name="FILE.JAVADOC.ZIP" value="geopublisher-doc.zip" />
		<property name="LINK.JDK" value="http://java.sun.com/javase/6/docs/api/" />
		<property name="LINK.LOG4J" value="http://logging.apache.org/log4j/docs/api/" />
		<property name="LINK.SCHMITZM" value="http://www.mojays.de/business/download/java/schmitzm/doc_schmitzm/" />
		<property name="JAVADOC.TITLE" value="Geopublisher and AtlasStyler Java classes" />

		<!-- Create a JavaDoc to "javadoc" folder -->
		<mkdir dir="${GP.JAVADOC}" />
		<delete failonerror="false" dir="${GP.JAVADOC}" />

		<javadoc verbose="false" failonerror="no" classpathref="AtlasFramewok_CLASSPATH" sourcepath="${GP.src}" destdir="${GP.JAVADOC}" author="true" version="true" overview="${GP.JAVADOC}/overview.html" windowtitle="${JAVADOC.TITLE}">
			<!-- <excludepackage name="skrueger.test"/> -->
			<link href="${LINK.JDK}" />
			<link href="${LINK.LOG4J}" />
			<link href="${LINK.SCHMITZM}" />
		</javadoc>

		<exec executable="/usr/bin/rsync">
			<arg line='-rmc --del --exclude="*~" --exclude="*.bak" ${GP.JAVADOC}/. prodi:AtlasFramework_javadoc ' />
		</exec>

	</target>


	<!-- ================================= 
          target: geotoolsSources - Creates a ZIP with recent sources of GT 26         
         ================================= -->
	<target name="gt26x_sourcesZip" description="Creates a fresh ${GT.26x}/../GT-${GTversion}-sources.zip">

		<delete failonerror="false" dir="${GT.26x}/../sources">
		</delete>

		<mkdir dir="${GT.26x}/../sources" />

		<copy todir="${GT.26x}/../sources">
			<fileset dir="${GT.26x}">
				<include name="**/*-SNAPSHOT-sources.jar" />
			</fileset>
		</copy>

		<unzip overwrite="true" dest="${GT.26x}/../sources">
			<fileset dir="${GT.26x}">
				<include name="**/*${GTversion}-sources.jar" />
			</fileset>
		</unzip>

		<delete file="${GT.26x}/../GT-${GTversion}-sources.zip" failonerror="false">
		</delete>

		<zip destfile="${GP.lib}/GT-${GTversion}-sources.zip">
			<zipfileset dir="${GT.26x}/../sources">
			</zipfileset>
		</zip>

		<delete failonerror="true" dir="${GT.26x}/../sources">
		</delete>

	</target>

</project>

